'use strict';

var app = app || {};

app.level = 1;
app.lives = 3;
app.pause = false;
app.points = 0;
app.maxSpeed = 400;
app.allItems = new Map();
app.LEVEL_UP_POINTS = 100;

// chooses one of three randome numbers 
app.randomNumber = function () {
    let num = Math.floor((Math.random()*10)/3);
    return num;
};

// gets random x cord for item placement (hearts, gems, and rocks)
app.itemCreation = function() {
    let num = 0;
    switch (Math.floor(Math.random()*10)) {
    case 0:
        num = 0;
        break;
    case 1:
        num = 101;
        break;
    case 2:
        num = 202;
        break;
    case 3:
        num = 303;
        break;
    case 4:
        num = 404;
        break;
    case 5:
        num = 505;
        break;
    case 6:
        num = 606;
        break;
    case 7:
        num = 707;
        break;
    case 8:
        num = 808;
        break;
    case 9:
        num = 909;
        break;

    }
    return num;
};

app.levelUp = function() {
    let that = this; 
    this.level++;
    // updates counters, and displays them
    $('#level').text('Level ' + that.level);
    this.points += this.LEVEL_UP_POINTS;
    $('#points').text(that.points + ' pts');

    // deletes current displayed gems, and hearts upon leveling up 
    this.deleteCollectables();

    // takes random number generated by itemCreation to generate items
    if (this.itemCreation() %5 === 0) {
        var heart = new Heart();
        this.allItems.set(heart.key, heart);
    }

    if (this.level <8 || (this.level >=25 && this.level %5 === 0)) {
        this.spawnEnemies();
    }

    if ((this.level >= 10 && this.level < 26) && this.level %2 === 1) {
        var rock = new Rock();
        this.allItems.set(rock.key, rock);
    }

    if (this.level >10 && this.level %2 === 1) {
        var gem = new Gem();
        this.allItems.set(gem.key, gem);
    }

    if (this.level > 30) {
        this.maxspeed = 500;
    }

    // win condition display 
    if (this.level === 40) {
        this.pause = true;
        $('#winModal').modal('show');
        $('.restart').click(function() {
            that.restart();
        });
    }

};

//functions to manage life counter 
app.addLife = function(up) {
    var elements = $('ul').children();
    var elem;
    var that = this;
    // add a life when player collects a hart from 
    if (up === true) {
        if (this.lives < 3) {
            elem = elements[this.lives];
            $(elem).toggleClass('fontawesome-heart-empty fontawesome-heart');
            this.lives++;
        }
    } else { // removes a life when player collides with enemy 
        this.lives--;
        elem = elements[this.lives];
        $(elem).toggleClass('fontawesome-heart fontawesome-heart-empty');

        //lose condtion when player has no lives and hits enemy 
        if (this.lives === -1) {
            this.pause = true;
            $('gameOverModal').modal('show');
            $('.restart').click(function() {
                that.restart;
            });
        }
    }
};

//reset function used to reset everything back to starting values 
app.restart = function () {
    var that = this;

    this.level = 1;
    this.lives = 3;
    this.points = 0;
    this.maxSpeed = 400;
    this.allItems.clear();
    this.allEnemies = [];
    this.player.x = 404;
    this.player.y = 390;

    // clears displayed info (points and level)
    $('#level').text('Level ' + this.level);
    $('#points').text(that.points + ' pts');
}
// Enemies our player must avoid
var Enemy = function() {
    // Variables applied to each of our instances go here,
    // we've provided one for you to get started

    // The image/sprite for our enemies, this uses
    // a helper we've provided to easily load images
    this.sprite = 'images/enemy-bug.png';
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {
    // You should multiply any movement by the dt parameter
    // which will ensure the game runs at the same speed for
    // all computers.
};

// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function() {
    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
};

// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.


// Now instantiate your objects.
// Place all enemy objects in an array called allEnemies
// Place the player object in a variable called player



// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    player.handleInput(allowedKeys[e.keyCode]);
});
